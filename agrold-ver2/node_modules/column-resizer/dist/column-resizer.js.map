{"version":3,"sources":["webpack://ColumnResizer/webpack/universalModuleDefinition","webpack://ColumnResizer/webpack/bootstrap","webpack://ColumnResizer/./node_modules/string-hash/index.js","webpack://ColumnResizer/./src/ColumnResizer.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","hash","str","length","charCodeAt","count","counter","ColumnResizer","tb","options","navigator","userAgent","indexOf","init","classList","remove","RESIZABLE","opt","fixed","tableWidth","Number","window","getComputedStyle","width","replace","valueOf","mw","columnCnt","columns","w","style","Math","round","locked","applyBounds","resizeMode","serialize","serializeStore","add","syncGrips","e","target","parentNode","data","g","grips","oe","touches","ox","pageX","offsetLeft","x","createStyle","document","querySelector","dragCursor","addEventListener","onGripDrag","onGripDragOver","draggingClass","grip","preventDefault","minWidth","cellSpace","borderSpace","last","min","max","Infinity","left","PX","liveDrag","overflow","syncCols","cb","onDrag","removeEventListener","lastChild","removeChild","onResize","disable","destroy","id","getAttribute","ID","matches","extended","partialRefresh","head","hoverCursor","css","setAttribute","oldOptions","extendOptions","headers","getTableHeaders","extendTable","remoteTable","remoteHeaders","extendRemoteTable","console","warn","map","col","FLEX","forEach","store","toString","gripContainer","cRect","getBoundingClientRect","tRect","offsetWidth","height","headerOnly","offsetHeight","tt","remote","element","stringHash","oldStyle","querySelectorAll","Array","from","filter","gripid","createElement","type","styleSheet","cssText","appendChild","createTextNode","extOptions","assign","DEFAULTS","table","th","concat","filterInvisible","nodes","column","node","display","removePadding","insertAdjacentHTML","previousElementSibling","marginLeft","marginRight","parseInt","legacyIE","cellSpacing","currentStyle","borderSpacing","split","border","borderLeftWidth","createGrips","controller","header","index","removeAttribute","push","cg","columnGrp","storage","deserializeStore","widths","dc","disabledColumns","createDiv","handle","gripInnerHtml","innerHTML","onGripMouseDown","capture","passive","ot","flush","tw","className","text","div","isOver","inc","c0","c1","w0","w1","sw0","sw1","sessionStorage","Element","msMatchesSelector"],"mappings":"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","file":"column-resizer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ColumnResizer\"] = factory();\n\telse\n\t\troot[\"ColumnResizer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n","/**\n * Created by jjglyn on 12/19/16.\n */\nimport stringHash from 'string-hash';\n\nconst counter = (() => {\n    let count = 0;\n    return () => {\n        return count++;\n    };\n})();\n\nexport default class ColumnResizer {\n    ID = 'id';\n    PX = 'px';\n    RESIZABLE = 'grip-resizable';\n    FLEX = 'grip-flex';\n    legacyIE = navigator.userAgent.indexOf('Trident/4.0') > 0;\n\n    /**\n     *\n     * @param {HTMLTableElement} tb\n     * @param {Object} options\n     */\n    constructor(tb, options = {}) {\n        try {\n            this.store = sessionStorage;\n        } catch (e) {\n            this.store = {};\n        }\n        this.grip = null;\n        this.tb = tb;\n        window.addEventListener('resize', this.onResize);\n        // Polyfill for IE\n        if (!Element.prototype.matches) {\n            Element.prototype.matches = Element.prototype.msMatchesSelector;\n        }\n        this.init(options);\n    }\n\n    /**\n     * Reinitialize the object with options.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    reset = options => {\n        return this.init(options);\n    };\n\n    /**\n     * Remove column resizing properties from the table then re-apply them\n     */\n    onResize = () => {\n        const t = this.tb;\n        t.classList.remove(this.RESIZABLE);\n        if (t.opt.fixed) {\n            t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n            let mw = 0;\n            for (let i = 0; i < t.columnCnt; i++) {\n                mw += t.columns[i].w;\n            }\n            for (let i = 0; i < t.columnCnt; i++) {\n                t.columns[i].style.width = Math.round(1000 * t.columns[i].w / mw) / 10 + '%';\n                t.columns[i].locked = true;\n            }\n        } else {\n            this.applyBounds();\n            if (t.opt.resizeMode === 'flex' && t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        t.classList.add(this.RESIZABLE);\n        this.syncGrips();\n    };\n\n    /**\n     * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events\n     * and store some values used while dragging.\n     * @param {UIEvent} e - grip's mousedown/touchstart event\n     */\n    onGripMouseDown = (e) => {\n        const o = e.target.parentNode.data;\n        const t = this.tb;\n        const g = t.grips[o.i];\n        const oe = e.touches;\n        g.ox = oe ? oe[0].pageX : e.pageX;\n        g.l = g.offsetLeft;\n        g.x = g.l;\n\n        this.createStyle(document.querySelector('head'), '*{cursor:' + t.opt.dragCursor + '!important}');\n        document.addEventListener('touchmove', this.onGripDrag);\n        document.addEventListener('mousemove', this.onGripDrag);\n        document.addEventListener('touchend', this.onGripDragOver);\n        document.addEventListener('mouseup', this.onGripDragOver);\n        g.classList.add(t.opt.draggingClass); \t//add the dragging class (to allow some visual feedback)\n        this.grip = g;\n        if (t.columns[o.i].locked) { \t//if the column is locked (after browser resize), then c.w must be updated\n            for (let i = 0, c; i < t.columnCnt; i++) {\n                c = t.columns[i];\n                c.locked = false;\n                c.w = Number(window.getComputedStyle(c).width.replace(/px/, '')).valueOf();\n            }\n        }\n        e.preventDefault(); //prevent text selection\n    };\n\n    /**\n     * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it.\n     * @param {UIEvent} e - mousemove/touchmove event bound to the window object\n     */\n    onGripDrag = (e) => {\n        const grip = this.grip;\n        if (!grip) {\n            return;\n        }\n        const t = grip.t;\n        const oe = e.touches;\n        const ox = oe ? oe[0].pageX : e.pageX;\n        let x = ox - grip.ox + grip.l;\n        const mw = t.opt.minWidth;\n        const i = grip.i;\n        const l = t.cellSpace * 1.5 + mw + t.borderSpace;\n        const last = i === t.columnCnt - 1;\n        const min = i ? t.grips[i - 1].offsetLeft + t.cellSpace + mw : l;\n        const max = t.opt.fixed ? i === t.columnCnt - 1 ? t.tableWidth - l : t.grips[i + 1].offsetLeft - t.cellSpace - mw : Infinity;\n        x = Math.max(min, Math.min(max, x));\n        grip.x = x;\n        grip.style.left = x + this.PX;\n        if (last) {\n            grip.w = t.columns[i].w + x - grip.l;\n        }\n        if (t.opt.liveDrag) {\n            if (last) {\n                t.columns[i].style.width = grip.w + this.PX;\n                if (!t.opt.fixed && t.opt.overflow) {\n                    t.style.minWidth = (t.tableWidth + x - grip.l) + this.PX;\n                } else {\n                    t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n                }\n            } else {\n                this.syncCols(t, i, false, t.opt);\n            }\n            this.syncGrips();\n            const cb = t.opt.onDrag;\n            if (cb) {\n                cb(e);\n            }\n        }\n        e.preventDefault(); //prevent text selection while dragging\n    };\n\n    /**\n     * Event handler fired when the dragging is over, updating table layout\n     * @param {UIEvent} e - grip's drag over event\n     */\n    onGripDragOver = (e) => {\n        const grip = this.grip;\n        document.removeEventListener('touchend', this.onGripDragOver);\n        document.removeEventListener('mouseup', this.onGripDragOver);\n        document.removeEventListener('touchmove', this.onGripDrag);\n        document.removeEventListener('mousemove', this.onGripDrag);\n        const last = document.querySelector('head').lastChild;\n        last.parentNode.removeChild(last);\n        if (!grip) {\n            return;\n        }\n        grip.classList.remove(grip.t.opt.draggingClass);\n        if (!(grip.x - grip.l === 0)) {\n            const t = grip.t;\n            const cb = t.opt.onResize;\n            const i = grip.i;\n            const last = i === t.columnCnt - 1;\n            if (last) {\n                const c = t.columns[i];\n                c.style.width = grip.w + this.PX;\n                c.w = grip.w;\n            } else {\n                this.syncCols(t, i, true, t.opt);\n            }\n            if (!t.opt.fixed) {\n                this.applyBounds();\n            }\n            this.syncGrips();\n            if (cb) {\n                cb(e);\n            }\n            if (t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        this.grip = null;\n    };\n\n    /**\n     * Prepares the table set in the constructor for resizing.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    init = (options) => {\n        if (options.disable) {\n            return this.destroy();\n        }\n        const tb = this.tb;\n        const id = tb.getAttribute(this.ID) || this.RESIZABLE + counter();\n        if (!tb.matches('table') || tb.extended && !options.partialRefresh) {\n            return null;\n        }\n        //append required CSS rules\n        const head = document.querySelector('head');\n        const css = ' .grip-resizable{table-layout:fixed;} .grip-resizable > tbody > tr > td, .grip-resizable > tbody > tr > th{overflow:hidden}'\n            + ' .grip-padding > tbody > tr > td, .grip-padding > tbody > tr > th{padding-left:0!important; padding-right:0!important;}'\n            + ' .grip-container{ height:0px; position:relative;} .grip-handle{margin-left:-5px; position:absolute; z-index:5; }'\n            + ' .grip-handle .grip-resizable{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: col-resize;top:0px}'\n            + ' .grip-lastgrip{position:absolute; width:1px; } .grip-drag{ border-left:1px dotted black;\t}'\n            + ' .grip-flex{width:auto!important;} .grip-handle.grip-disabledgrip .grip-resizable{cursor:default; display:none;}';\n        this.createStyle(head, css);\n        if (options.hoverCursor && options.hoverCursor !== 'col-resize') {\n            const css = '.grip-handle .grip-resizable:hover{cursor:' + options.hoverCursor + '!important}';\n            this.createStyle(head, css);\n        }\n        tb.setAttribute(this.ID, id);\n        const oldOptions = tb.opt;\n        tb.opt = this.extendOptions(options);\n        const headers = this.getTableHeaders(tb);\n        this.extendTable(headers);\n        if (options.remoteTable && options.remoteTable.matches('table')) {\n            const remoteHeaders = this.getTableHeaders(tb.opt.remoteTable);\n            if (headers.length === remoteHeaders.length) {\n                this.extendRemoteTable(tb.opt.remoteTable, remoteHeaders, tb);\n            } else {\n                console.warn('column count for remote table did not match');\n            }\n        }\n        return oldOptions;\n    };\n\n    /**\n     * This function updates all columns width according to its real width. It must be taken into account that the\n     * sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind\n     * of max-width).\n     */\n    applyBounds = () => {\n        const t = this.tb;\n        const w = t.columns.map(col => {\n            return window.getComputedStyle(col).width;\n        });\n        t.style.width = window.getComputedStyle(t).width;\n        t.tableWidth = Number(t.style.width.replace(/px/, '')).valueOf();\n        //prevent table width changes\n        t.classList.remove(this.FLEX);\n        t.columns.forEach((col, i) => {\n            col.style.width = w[i];\n            col.w = Number(w[i].replace(/px/, '')).valueOf();\n        });\n        //allow table width changes\n        t.classList.add(this.FLEX);\n    };\n\n    /**\n     * Writes the current column widths to storage.\n     */\n    serializeStore = () => {\n        const store = this.store;\n        const t = this.tb;\n        store[t.getAttribute(this.ID)] = '';\n        let m = 0;\n        for (let i = 0; i < t.columns.length; i++) {\n            const w = window.getComputedStyle(t.columns[i]).width.replace(/px/, '');\n            store[t.getAttribute(this.ID)] += w + ';';\n            m += Number(w).valueOf();\n        }\n        //the last item of the serialized string is the table's active area (width)\n        store[t.getAttribute(this.ID)] += m.toString();\n        if (!t.opt.fixed) {\n            store[t.getAttribute(this.ID)] += ';' + window.getComputedStyle(t).width.replace(/px/, '');\n        }\n    };\n\n    /**\n     * Function that places each grip in the correct position according to the current table layout\n     */\n    syncGrips = () => {\n        const t = this.tb;\n        t.gripContainer.style.width = t.tableWidth + this.PX;\n        for (let i = 0; i < t.columnCnt; i++) {\n            const c = t.columns[i];\n            const cRect = c.getBoundingClientRect();\n            const tRect = t.getBoundingClientRect();\n            t.grips[i].style.left = cRect.left - tRect.left + c.offsetWidth + t.cellSpace / 2 + this.PX;\n            t.grips[i].style.height = (t.opt.headerOnly ? t.columns[0].offsetHeight : t.offsetHeight) + this.PX;\n        }\n    };\n\n    /**\n     * This function removes any enhancements from the table being processed.\n     * @returns {Object} current option object if any\n     */\n    destroy = () => {\n        const tt = this.tb;\n        const id = tt.getAttribute(this.ID);\n        if (!id) {\n            return null;\n        }\n        this.store[id] = '';\n        tt.classList.remove(this.RESIZABLE);\n        tt.classList.remove(this.FLEX);\n        if (tt.remote) {\n            tt.remote.classList.remove(this.RESIZABLE);\n            tt.remote.classList.remove(this.FLEX);\n        }\n        if (tt.gripContainer && tt.gripContainer.parentNode) {\n            tt.gripContainer.parentNode.removeChild(tt.gripContainer);\n        }\n        delete tt.extended;\n        return tt.opt;\n    };\n\n    /**\n     * Utility method to add a <style> to an element\n     * @param {HTMLElement} element\n     * @param {string} css\n     */\n    createStyle = (element, css) => {\n        const hash = stringHash(css).toString();\n        const oldStyle = element.querySelectorAll('style');\n        const filtered = Array.from(oldStyle).filter(style => {\n            return (style.gripid === hash);\n        });\n        if (filtered.length) {\n            return;\n        }\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        style.gripid = hash;\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n        element.appendChild(style);\n    };\n\n    /**\n     * Populates unset options with defaults and sets resizeMode properties.\n     * @param {Object} options\n     * @returns {Object}\n     */\n    extendOptions = (options) => {\n        const extOptions = Object.assign({}, ColumnResizer.DEFAULTS, options);\n        extOptions.fixed = true;\n        extOptions.overflow = false;\n        switch (extOptions.resizeMode) {\n            case 'flex':\n                extOptions.fixed = false;\n                break;\n            case 'overflow':\n                extOptions.fixed = false;\n                extOptions.overflow = true;\n                break;\n        }\n        return extOptions;\n    };\n\n    /**\n     * Finds all the visible table header elements from a given table.\n     * @param {HTMLTableElement} table\n     * @returns {HTMLElement[]}\n     */\n    getTableHeaders = (table) => {\n        const id = '#' + table.id;\n        let th = Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>th'));\n        th = th.concat(Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>td')));\n        if (!th.length) {\n            th = Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>th'));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>th')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>td')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>td')));\n        }\n        return this.filterInvisible(th, false);\n    };\n\n    /**\n     * Filter invisible columns.\n     * @param {HTMLElement[]} nodes\n     * @param {boolean} column\n     * @return {HTMLElement[]}\n     */\n    filterInvisible = (nodes, column) => {\n        return nodes.filter((node) => {\n            const width = column ? -1 : node.offsetWidth;\n            const height = column ? -1 : node.offsetHeight;\n            const invisible = (width === 0 && height === 0)\n                || (node.style && node.style.display && window.getComputedStyle(node).display === 'none') || false;\n            return !invisible;\n        });\n    };\n\n    /**\n     * Add properties to the table for resizing\n     * @param {HTMLTableElement} th\n     */\n    extendTable = (th) => {\n        const tb = this.tb;\n        if (tb.opt.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        tb.insertAdjacentHTML('beforebegin', '<div class=\"grip-container\"/>');\t//class forces table rendering in fixed-layout mode to prevent column's min-width\n        tb.grips = []; // grips\n        tb.columns = []; // columns\n        tb.tableWidth = Number(window.getComputedStyle(tb).width.replace(/px/, '')).valueOf();\n        tb.gripContainer = tb.previousElementSibling;\n        if (tb.opt.marginLeft) {\n            tb.gripContainer.style.marginLeft = tb.opt.marginLeft;\n        }\n        if (tb.opt.marginRight) {\n            tb.gripContainer.style.marginRight = tb.opt.marginRight;\n        }\n        tb.cellSpace = parseInt(this.legacyIE ? tb.cellSpacing || tb.currentStyle.borderSpacing : window.getComputedStyle(tb).borderSpacing.split(' ')[0].replace(/px/, '')) || 2;\n        tb.borderSpace = parseInt(this.legacyIE ? tb.border || tb.currentStyle.borderLeftWidth : window.getComputedStyle(tb).borderLeftWidth.replace(/px/, '')) || 1;\n        tb.extended = true;\n        this.createGrips(th);\n    };\n\n    /**\n     * Add properties to the remote table for resizing\n     * @param {HTMLTableElement} tb - the remote table\n     * @param {HTMLElement[]} th - table header array\n     * @param {HTMLTableElement} controller - the controlling table\n     */\n    extendRemoteTable = (tb, th, controller) => {\n        const options = controller.opt;\n        if (options.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        if (!tb.getAttribute(this.ID)) {\n            tb.setAttribute(this.ID, controller.getAttribute(this.ID) + 'remote');\n        }\n        tb.columns = []; // columns\n        th.forEach((header, index) => {\n            const column = th[index];\n            column.w = controller.columns[index].w;\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            tb.columns.push(column);\n        });\n        tb.tableWidth = controller.tableWidth;\n        tb.cellSpace = controller.cellSpace;\n        tb.borderSpace = controller.borderSpace;\n        const cg = Array.from(tb.querySelectorAll('col'));\n        tb.columnGrp = this.filterInvisible(cg, true);\n        tb.columnGrp.forEach( (col, index) => {\n            col.removeAttribute('width');\n            col.style.width = controller.columnGrp[index].style.width;\n        });\n        controller.remote = tb;\n    };\n\n    /**\n     * Function to create all the grips associated with the table given by parameters\n     * @param {HTMLElement[]} th - table header array\n     */\n    createGrips = (th) => {\n        const t = this.tb;\n        t.columnGrp = this.filterInvisible(Array.from(t.querySelectorAll('col')), true);\n        t.columnGrp.forEach(col => {\n            col.removeAttribute('width');\n        });\n        t.columnCnt = th.length;\n        let storage = false;\n        if (this.store[t.getAttribute(this.ID)]) {\n            this.deserializeStore(th);\n            storage = true;\n        }\n        if (!t.opt.widths) {\n            t.opt.widths = [];\n        }\n        th.forEach((header, index) => {\n            const column = th[index];\n            const dc = t.opt.disabledColumns.indexOf(index) !== -1;\n            this.createDiv(t.gripContainer, 'grip-handle');\n            const handle = t.gripContainer.lastChild;\n            if (!dc && t.opt.gripInnerHtml) { //add the visual node to be used as grip\n                handle.innerHTML = t.opt.gripInnerHtml;\n            }\n            this.createDiv(handle, this.RESIZABLE);\n            if (index === t.columnCnt - 1) {\n                handle.classList.add('grip-lastgrip');\n                if (t.opt.fixed) {\n                    // if the table resizing mode is set to fixed, the last grip is removed since table\n                    // width can not change\n                    handle.innerHTML = '';\n                }\n            }\n            handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n            handle.addEventListener('mousedown', this.onGripMouseDown, true);\n\n            if (!dc) {\n                handle.classList.remove('grip-disabledgrip');\n                handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n                handle.addEventListener('mousedown', this.onGripMouseDown, true);\n            } else {\n                handle.classList.add('grip-disabledgrip');\n            }\n\n            handle.t = t;\n            handle.i = index;\n            if (t.opt.widths[index]) {\n                column.w = t.opt.widths[index];\n            } else if (storage) {\n                column.w = Number(column.style.width.replace(/px/, '')).valueOf();\n            } else {\n                column.w = Number(window.getComputedStyle(column).width.replace(/px/, '')).valueOf();\n            }\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            handle.data = {i: index, t: t.getAttribute(this.ID), last: index === t.columnCnt - 1};\n            t.grips.push(handle);\n            t.columns.push(column);\n        });\n        let ot = Array.from(t.querySelectorAll('td'));\n        ot.concat(Array.from(t.querySelectorAll('th')));\n        //the width attribute is removed from all table cells which are not nested in other tables and don't belong to the header array\n        ot = ot.filter((node) => {\n            // .not(th)\n            for (let i = 0; i < th.length; i++) {\n                if (th[i] === node) return false;\n            }\n            return true;\n        });\n        ot = ot.filter((node) => {\n            //.not('table th, table td')\n            return !(node.querySelectorAll('table th').length || node.querySelectorAll('table td').length);\n        });\n        ot.forEach(table => {\n            table.removeAttribute('width');\n        });\n        if (!t.opt.fixed) {\n            t.removeAttribute('width');\n            t.classList.add(this.FLEX);\n        }\n        this.syncGrips();\n    };\n\n    /**\n     * Get the stored table headers.\n     * @param {HTMLElement[]} th - table header array\n     */\n    deserializeStore = (th) => {\n        const t = this.tb;\n        t.columnGrp.forEach((node) => {\n            node.removeAttribute('width');\n        });\n        if (t.opt.flush) {\n            this.store[t.getAttribute(this.ID)] = '';\n            return;\n        }\n        const w = this.store[t.getAttribute(this.ID)].split(';');\n        const tw = w[t.columnCnt + 1];\n        if (!t.opt.fixed && tw) {\n            t.style.width = tw + this.PX;\n            if (t.opt.overflow) {\n                t.style.minWidth = tw + this.PX;\n                t.tableWidth = Number(tw).valueOf();\n            }\n        }\n        for (let i = 0; i < t.columnCnt; i++) {\n            th[i].style.width = w[i] + this.PX;\n            if (t.columnGrp[i]) {\n                // this code is required in order to create an inline CSS rule with higher precedence than\n                // an existing CSS class in the 'col' elements\n                t.columnGrp[i].style.width = 100 * Number(w[i]).valueOf() / Number(w[t.columnCnt]).valueOf() + '%';\n            }\n        }\n    };\n\n    /**\n     * Utility method to wrap HTML text in a <div/> and appent to an element.\n     * @param {HTMLElement} element - the HTML element to append the div to\n     * @param {string} className - class name for the new div for styling\n     * @param {string} text - inner HTML text\n     */\n    createDiv = (element, className, text) => {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        if (text) {\n            div.innerHTML = text;\n        }\n        element.appendChild(div);\n    };\n\n    /**\n     * This function updates column's width according to the horizontal position increment of the grip being\n     * dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver\n     * event handler to synchronize grip's position with their related columns.\n     * @param {HTMLTableElement} t - table object\n     * @param {number} i - index of the grip being dragged\n     * @param {boolean} isOver - to identify when the function is being called from the onGripDragOver event\n     * @param {Object} options - used for chaining options with remote tables\n     */\n    syncCols = (t, i, isOver, options) => {\n        const remote = t.remote;\n        const inc = this.grip.x - this.grip.l;\n        const c0 = t.columns[i];\n        const c1 = t.columns[i + 1];\n        if (!(c0 && c1)) {\n            return;\n        }\n        const w0 = c0.w + inc;\n        const w1 = c1.w - inc;\n        const sw0 = w0 + this.PX;\n        c0.style.width = sw0;\n        if (t.columnGrp[i] && t.columnGrp[i].style.width) {\n            t.columnGrp[i].style.width = sw0;\n        }\n        if (remote) {\n            remote.columns[i].style.width = sw0;\n            if (remote.columnGrp[i] && remote.columnGrp[i].style.width) {\n                remote.columnGrp[i].style.width = sw0;\n            }\n        }\n        if (options.fixed) {\n            const sw1 = w1 + this.PX;\n            c1.style.width = sw1;\n            if (t.columnGrp[i + 1] && t.columnGrp[i + 1].style.width) {\n                t.columnGrp[i + 1].style.width = sw1;\n            }\n            if (remote) {\n                remote.columns[i + 1].style.width = sw1;\n                if (remote.columnGrp[i + 1] && remote.columnGrp[i + 1].style.width) {\n                    remote.columnGrp[i + 1].style.width = sw1;\n                }\n            }\n        } else if (options.overflow) {\n            //if overflow is set, increment min-width to force overflow\n            t.style.minWidth = (t.tableWidth + inc) + this.PX;\n        }\n        if (isOver) {\n            c0.w = w0;\n            c1.w = options.fixed ? w1 : c1.w;\n            if (remote) {\n                remote.columns[i].w = w0;\n                remote.columns[i + 1].w = options.fixed ? w1 : c1.w;\n            }\n        }\n    };\n}\n\nColumnResizer.DEFAULTS = {\n    //attributes:\n    resizeMode: 'fit',              //mode can be 'fit', 'flex' or 'overflow'\n    draggingClass: 'grip-drag',\t    //css-class used when a grip is being dragged (for visual feedback purposes)\n    gripInnerHtml: '',\t\t\t\t//if it is required to use a custom grip it can be done using some custom HTML\n    liveDrag: false,\t\t\t\t//enables table-layout updating while dragging\n    minWidth: 15, \t\t\t\t\t//minimum width value in pixels allowed for a column\n    headerOnly: false,\t\t\t\t//specifies that the size of the the column resizing anchors will be bounded to the size of the first row\n    hoverCursor: 'col-resize',  \t//cursor to be used on grip hover\n    dragCursor: 'col-resize',  \t\t//cursor to be used while dragging\n    flush: false, \t\t\t\t\t//when it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data\n    marginLeft: null,\t\t\t\t//e.g. '10%', '15em', '5px' ...\n    marginRight: null, \t\t\t\t//e.g. '10%', '15em', '5px' ...\n    remoteTable: null,              //other table element to resize using the main table as a controller\n    disable: false,\t\t\t\t\t//disables all the enhancements performed in a previously resized table\n    partialRefresh: false,\t\t\t//can be used when the table is inside of an updatePanel,\n    disabledColumns: [],            //column indexes to be excluded\n    removePadding: true,            //remove padding from the header cells.\n    widths: [],                     //array of initial column widths\n    serialize: true,\n\n    //events:\n    onDrag: null, \t\t\t\t\t//callback function to be fired during the column resizing process if liveDrag is enabled\n    onResize: null\t\t\t\t\t//callback function fired when the dragging process is over\n};\n"],"sourceRoot":""}